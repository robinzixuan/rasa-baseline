openapi: 3.0.0
servers:
- url: //api
  description: Local Server
info:
  description: |
    This is the Rasa X HTTP API

  version: 1.0.0
  title: Rasa X HTTP API

# Note: If you add / rename / delete a tag in this list, make sure to also adapt the `x-tagGroups` entry.
tags:
- name: Models
  description: Your combined NLU and Core models
- name: Model config
  description: Your combined NLU and Core model config
- name: Conversations
  description: Conversations between your assistant and end users
- name: Messages
  description: Individual user messages with NLU predictions
- name: User
  description: Users of this Rasa X/Enterprise instance
- name: NLU Data
  description: Your NLU training data
- name: Stories
  description: Your Core training stories
- name: Rules
  description: Your Core rules
- name: Tests
  description: Your test stories
- name: Responses
  description: Your assistant's responses
- name: Analytics
  description: End-user engagement with your assistant
- name: Roles
  description: Permissions associated with Rasa Enterprise users
- name: Environments
  description: Separate environments where models can be deployed and tested by users
- name: Runtime config
  description: Runtime config containing the channel credentials and endpoint settings
- name: Chat Token
  description: Token used for sharing your assistant with testers
- name: Feature Flags
  description: Experimental Rasa X features
- name: Status
  description: API status information
- name: Authentication
  description: Authentication endpoints
- name: Logs
  description: Zipped Rasa X logs
- name: Domain
  description: Rasa domain endpoints
- name: Intents
  description: Information about used intents
- name: Insights
  description: Intent insights endpoints
- name: Evaluation
  description: Evaluates conversations with a model
- name: Git
  description: Information about connected Git repositories

x-tagGroups:
- name: Administration
  tags:
  - Authentication
  - Status
  - Feature Flags
  - Chat Token
  - Runtime config
  - Git
  - Telemetry
- name: Conversations
  tags:
  - Conversations
- name: Training
  tags:
  - NLU Data
  - Messages
  - Stories
  - Rules
  - Responses
  - Model config
  - Intents
  - Insights
  - Domain
- name: Models
  tags:
  - Models
  - Environments
  - Evaluation
- name: Enterprise
  tags:
  - Analytics
  - Roles
  - User

paths:
  /health:
    get:
      tags:
      - Status
      summary: Fetch status of Rasa services
      operationId: status
      responses:
        200:
          description: Status of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  production:
                    type: object
                    properties:
                      version:
                        type: string
                      minimum_compatible_version:
                        type: string
                      status:
                        type: number
                  worker:
                    type: object
                    properties:
                      version:
                        type: string
                      minimum_compatible_version:
                        type: string
                      status:
                        type: number
                  database_migration:
                    type: object
                    properties:
                      status:
                        type: string
                      current_revision:
                        type: array
                        items:
                          type: string
                      target_revision:
                        type: array
                        items:
                          type: string
                      progress_in_percent:
                        type: number

  /version:
    get:
      tags:
      - Status
      summary: Fetch versions of services.
      description: >-
        Fetch versions of services. If an update is available, the response will also
        contain an optional "updates" section.
      operationId: versions
      parameters:
      - in: query
        name: skip_external
        schema:
          type: boolean
          default: false
        required: false
        description: >-
          When `true`, skip interactions with external services (Rasa Open Source nodes and DockerHub).
      responses:
        200:
          description: Versions of services
          content:
            application/json:
              schema:
                type: object
                properties:
                  rasa:
                    type: object
                    properties:
                      production:
                        type: string
                      worker:
                        type: string
                  rasa-x:
                    type: string
                  enterprise:
                    type: boolean
                  local_mode:
                    type: boolean
                  development_mode:
                    type: boolean
                  updates:
                    type: object
                    properties:
                      rasa-x:
                        type: object
                        properties:
                          version:
                            type: string
                          changelog_url:
                            type: string
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/JWT'


  /auth:
    post:
      tags:
      - Authentication
      summary: Perform authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Success status
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string

        401:
          description: Wrong schema
          content:
            text/plain:
              schema:
                type: string
                enum:
                - wrong schema
                - unauthorized

  /auth/jwt:
    post:
      tags:
      - Authentication
      summary: issue signed JWT
      operationId: issueJWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - chat_token
              properties:
                chat_token:
                  description: Token shared with guests that gives them a permission to authenticate
                  type: string
      responses:
        200:
          description:  Success status
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    description: Access token that can be used for authentication
                    type: string
                  conversation_id:
                    description: Newly generated conversation ID
                    type: string
        400:
          $ref: '#/components/responses/SchemaValidationError'

  /logs:
    get:
      tags:
      - Logs
      summary: Get the logs of the Rasa X service
      operationId: getLogs
      parameters:
      - $ref: '#/components/parameters/api_token'
      responses:
        200:
          description: Logs as a zip file
          content:
            application/zip: {}

  /user:
    get:
      tags:
      - User
      summary: Get information about this user
      operationId: getUserMe
      responses:
        200:
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
      - User
      summary: Update username of this user
      operationId: updateUsername
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        200:
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user/password:
    post:
      tags:
      - User
      summary: Change password of this user
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - old_password
              - new_password
              - new_password_confirm
              properties:
                username:
                  type: string
                old_password:
                  type: string
                new_password:
                  type: string
                new_password_confirm:
                  type: string
      responses:
        200:
          description: User whose password was just changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          description: User not found, wrong password

  /users:
    post:
      tags:
      - User
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - username
              - password
              properties:
                username:
                  type: string
                password:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: A user with the same username already exists
    get:
      tags:
      - User
      summary: List all users
      operationId: getUsers
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{username}:
    put:
      tags:
        - User
      summary: Update a user
      operationId: updateUser
      parameters:
      - $ref: '#/components/parameters/username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  $ref: '#/components/schemas/AnyValue'
      responses:
        204:
          description: The user was updated successfully
        404:
          description: The user doesn't exist
        403:
          description: Users can only update their own properties
    delete:
      tags:
      - User
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/username'
      - $ref: '#/components/parameters/deleteCreatedConversations'
      responses:
        200:
          description: Deleted user
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    error:
                      type: string
  /samlUsers:
    post:
      tags:
      - User
      summary: Create a new SAML user
      operationId: createSamlUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - saml_id
              properties:
                saml_id:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSAML'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          description: A user with the same SAML ID already exists

  /projects/{project_id}:
    post:
      tags:
      - Project
      summary: Create a project
      description: Not recommended to be used. The frontend only supports a single project.
      operationId: postProject
      parameters:
      - in: path
        name: project_id
        schema:
          type: string
        required: true
      responses:
        200:
          description: Newly created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Project already exists

  /projects/{project_id}/models:
    get:
      tags:
      - Models
      summary: Get a list of Rasa models
      operationId: getModels
      description: >-
        Returns a list of metadata on Rasa models. A Rasa model is a model
        combining a trained dialogue model with an NLU model.
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/modelTag'
      responses:
        200:
          description: Model list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Models
      summary: Upload a zipped Rasa model
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
      responses:
        201:
          description: The created model.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        400:
          description: Model could not be saved.
        409:
          description: A model with that name already exists.

  /projects/{project_id}/models/jobs:
    post:
      tags:
        - Models
      summary: Train a Rasa model
      operationId: trainModel
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/api_token'
      responses:
        200:
          description: Confirmation of model training
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelTrainingConfirmation'
        201:
          description: Model already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelExists'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: An unexpected error happened when the request was processed
        422:
          description: An error happened when the Rasa Open Source tried to train the model

  /projects/{project_id}/models/tags/{tag}:
    get:
      tags:
      - Models
      summary: Get a Rasa model with tag
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/tag'
      responses:
        200:
          description: Zipped Rasa model
          content:
            application/octet-stream:
              schema:
                type: string
        404:
          description: No model found for tag

  /projects/{project_id}/models/{model}:
    get:
      tags:
      - Models
      summary: Get a Rasa model by name
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      responses:
        200:
          description: Zipped model file
          content:
            application/octet-stream:
              schema:
                type: string
        404:
          description: No model found for name
    delete:
      tags:
      - Models
      summary: Delete a Rasa model
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      responses:
        204:
          description: Delete OK
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Model could not be deleted

  /projects/{project_id}/models/{model}/tags/{tag}:
    put:
      tags:
      - Models
      summary: Tag a Rasa model
      description: >-
        This endpoint can be used to assign a tag to a Rasa model. The tag
        will be removed from any other model that might have it.
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      - $ref: '#/components/parameters/tag'
      responses:
        204:
          description: Tag created on model
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Model was not found or is not compatible.
    delete:
      tags:
      - Models
      summary: Delete a tag of a Rasa model
      description: >-
        Rasa model tags can be deleted at this endpoint.
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      - $ref: '#/components/parameters/tag'
      responses:
        204:
          description: Delete OK
          content:
            text/plain:
              schema:
                type: string

  /projects/{project_id}/logs:
    get:
      tags:
      - Messages
      summary: Get suggestions
      operationId: getSuggestions
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/q'
      - $ref: '#/components/parameters/intent'
      - in: query
        name: entity
        schema:
          type: string
          default: null
        required: false
        description: Comma-separated entities to filter on
      - in: query
        name: tags
        schema:
          type: string
          default: null
        required: false
        description: >-
          Comma-separated tags IDs to filter on. Only messages that have all of these
          tag IDs assigned to them will be included in the response.
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - in: query
        name: exclude_training_data
        schema:
          type: boolean
          default: true
        required: false
        description: Whether to exclude results that are already contained in the training data
      - in: query
        name: start
        schema:
          type: number
          default: null
        required: false
        description: Minimum timestamp to filter messages on.
      - in: query
        name: until
        schema:
          type: number
          default: null
        required: false
        description: Maximum timestamp to filter messages on.
      - in: query
        name: sort_by
        schema:
          type: string
          default: id
        required: false
        description: Field to which sort results by
      - in: query
        name: sort_order
        schema:
          type: string
          default: desc
        required: false
        description: Whether to sort results in ascending (asc) or descending (desc) order
      responses:
        200:
          description: Suggestions for project
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total responses ignoring limit and offset
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Suggestion'
    post:
      tags:
      - Messages
      summary: Parse text and create a new log entry
      operationId: parseText
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/q'
      responses:
        200:
          description: Created log entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggestion'

  /projects/{project_id}/logs/{log_id}:
    delete:
      tags:
      - Messages
      summary: Archive log
      operationId: archiveLog
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/logId'
      responses:
        200:
          description: Successfully archived log
          content:
            text/plain:
              schema:
                type: string
                description: Log {log_id} archived
        400:
          description: Archiving of logs unsuccessful

  /projects/{project_id}/logs/{hash}:
    get:
      tags:
      - Messages
      summary: Fetch log by its hash
      operationId: getLogByHash
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/hash'
      responses:
        200:
          description: Successfully fetched log log
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Suggestion'
        404:
          description: Fetching of log unsuccessful

  /project/{project_id}/logs/{log_id}/tags:
    post:
      tags:
        - Messages
      summary: Assign data tags to a message
      description: >-
        Assign all data tags from the body of the request to the message.
        If data tags don’t exist yet, they will be created.
      operationId: postDataTagsMessage
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/logId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataTagRequest'
      responses:
        200:
          description: All tags were successfully assigned to a message
        400:
          description: An error happened while assigning the tags

  /project/{project_id}/logs/{log_id}/tags/{data_tag_id}:
    delete:
      tags:
        - Messages
      summary: Remove tag from a message
      description: >-
        Remove a tag from a message.
      operationId: deleteDataTagsMessage
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/logId'
        - $ref: '#/components/parameters/dataTagId'
      responses:
        204:
          description: Tag was successfully removed from a message
        404:
          description: Message or tag were not found

  /conversations:
    get:
      tags:
      - Conversations
      summary: Fetch list of conversations
      operationId: getConversations
      parameters:
      - $ref: '#/components/parameters/environment'
      - $ref: '#/components/parameters/intent'
      - in: query
        name: entity
        schema:
          type: string
          default: null
        required: false
        description: Comma-separated entities to filter on
      - in: query
        name: action
        schema:
          type: string
          default: null
        required: false
        description: Comma-separated actions to filter on
      - in: query
        name: text
        schema:
          type: string
          default: null
        required: false
        description: User utterance text to filter on
      - in: query
        name: start
        schema:
          type: number
          default: null
        required: false
        description: Minimum timestamp of latest user event
      - in: query
        name: until
        schema:
          type: number
          default: null
        required: false
        description: Maximum timestamp of latest user event
      - in: query
        name: policies
        schema:
          type: string
          default: null
        required: false
        description: Comma-separated list of policies used for prediction
      - in: query
        name: minimumConfidence
        schema:
          type: number
          default: null
        required: false
        description: Minimum value of the Core (action) confidence
      - in: query
        name: maximumConfidence
        schema:
          type: number
          default: null
        required: false
        description: >-
          Maximum value of the Core (action) confidence. This will return all
          conversations that have ANY (i.e. at least one) action predicted with a
          confidence <= `maximumConfidence`.
      - in: query
        name: minimumNluConfidence
        schema:
          type: number
          default: null
        required: false
        description: Minimum value of the NLU (intent) confidence
      - in: query
        name: maximumNluConfidence
        schema:
          type: number
          default: null
        required: false
        description: >-
          Maximum value of the NLU (intent) confidence. This will return all
          conversations that have ANY (i.e. at least one) intent predicted with a
          confidence <= `maximumNluConfidence`.
      - in: query
        name: minimumUserMessages
        schema:
          type: number
          default: null
        required: false
        description: Minimum number of user messages per conversation
      - in: query
        name: in_training_data
        schema:
          type: boolean
          default: null
        required: false
        description: >-
          Only show conversations that appear in the training data. If false,
          only show conversations not appearing in training data . If
          unset, show all conversations.
      - in: query
        name: review_status
        schema:
          enum: ["unread", "reviewed", "saved_for_later"]
        required: false
        description: >-
          Filter conversations on their review status.
      - in: query
        name: sort_by_confidence
        schema:
          type: boolean
          default: true
        required: false
        description: >-
          Sort conversations that are not found in the training data
          by their minimum action confidence from high to low.
          Has no effect if `in_training_data` is anything other than false.
      - in: query
        name: sort_by_latest_event_time
        schema:
          type: boolean
          default: true
        required: false
        description: >-
          Sort conversations by their latest activity from most recent to
          least recent.
      - in: query
        name: is_flagged
        schema:
          type: boolean
          default: false
        required: false
        description: >-
          Filter for conversations which contain flagged messages.
      - in: query
        name: exclude_self
        schema:
          type: boolean
          default: false
        required: false
        description: >-
          Exclude currently authenticated user from conversations.
      - in: query
        name: tags_any
        schema:
          type: string
          default: null
        required: false
        description: >-
          Comma-separated list of tag IDs. Only conversations that have ANY of these
          tag IDs assigned to them will be included in the response.
      - in: query
        name: slots
        schema:
          type: string
          default: null
        required: false
        description: >-
          Comma-separated list of slot names and values to filter with. Each value of the list
          must follow the format NAME:VALUE. Only conversations that have ANY of these slots
          values will be included in the response.
      - in: query
        name: input_channels
        schema:
          type: string
          default: null
        required: false
        description: >-
          Comma-separated list of input channels to filter with. Only conversations that have ANY
          of these channels as their latest input channels will be included in the response.
      responses:
        200:
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConversationMetadata'
    post:
      tags:
      - Conversations
      summary: Create a new, empty conversation
      operationId: createConversation
      description: >-
        Create a new conversation from the events of an existing
        conversation. This is used in Rasa X interactive learning to re-annotate failed
        conversations by taking the events until the point where the assistant made the
        wrong decision and then appending the correct conversation events.
      requestBody:
        description: >-
          Information to create the new conversation. If no request body is given, a
          conversation is created which only contains the conversation start events.
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationCreateInstruction'
      responses:
        201:
          description: The created conversation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        404:
          description: >-
            The conversation which should be used as a template to create a new one
            does not exist or no events were selected to copy from this conversation.
        422:
          description: >-
            There was an error when forwarding the events the Rasa Open Source
            deployment.

  /conversations/{conversation_id}:
    get:
      tags:
        - Conversations
      summary: Fetch a conversation in a specified format.
      description: >-
        This endpoint accepts a `format` parameter. Currently, only `full_conversation`
        is supported as its value (the default). This implies that the conversation events,
        rather than the conversation metadata, will be returned.

        By default, this returns the serialised tracker (conversation) in its JSON representation
        as a file attachment if the `Accept: application/json` request header is specified, or a
        story dump for that conversation in Markdown or YAML format if `Accept` is `text/markdown`
        or `text/yaml` respectively.

        Also, this returns conversation events from all deployment environments when the `environment` parameter is not set.
      operationId: getConversationInFormat
      parameters:
        - in: query
          name: format
          schema:
            type: string
            default: "full_conversation"
          required: false
        - in: query
          name: test_story
          description: >-
            If `true`, and when returning a story dump, include the text for user messages in user
            utterance events. When returning the conversation tracker, this parameter has no effect.
          schema:
            type: boolean
            default: false
          required: false
        - $ref: '#/components/parameters/environment'
        - $ref: '#/components/parameters/conversationId'
        - $ref: '#/components/parameters/until'
        - $ref: '#/components/parameters/since'
        - $ref: '#/components/parameters/history'
        - $ref: '#/components/parameters/exclude_leading_action_session_start'
        - $ref: '#/components/parameters/accept'
      responses:
        200:
          description: >-
            When `format` is "full_conversation", it returns the tracker for
            {conversation_id} as JSON or debug dump as file attachment
          headers:
            Content-Disposition:
              schema:
                type: string
                description: >-
                  Indicates if the content is expected to be displayed
                  inline in the browser, that is, as a Web page or as part of a Web
                  page, or as an attachment, that is downloaded and saved locally.
                  `inline` if the JSON representation is requested, or
                  `attachment;filename=<FILENAME>` if the JSON file dump or story
                  dump is requested.
        400:
          description: >-
            Unsupported value of the desired conversation `format` was requested.
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                    description: >-
                      When `format` is "full_conversation", it returns the tracker for
                      {conversation_id} as JSON. Returned if the
                      `Accept` header remains unspecified, or its value is not one of
                      `application/json` or `text/markdown`.
                  - type: object
                    description: >-
                      When `format` is `full_conversation`, it returns attachment
                      of tracker debug dump in JSON format. Returned if the
                      the `Accept: application/json` request header is specified.
            text/markdown:
              schema:
                type: string
                description: >-
                  When `format` is `full_conversation`, it returns attachment of tracker
                  debug dump in markdown format. Returned if
                  the `Accept: text/markdown` request header is specified.
    delete:
      tags:
        - Conversations
      summary: Delete conversation with specified ID
      description: >-
        Completely deletes conversation with specified ID. It also deletes message logs
        in the NLU Inbox associated with this conversation. If the operation succeeded,
        the tracker for specified conversation ID will not be available any longer.
      operationId: deleteConversationById
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        204:
          description: Conversation was successfully deleted
        404:
          description: Conversation was not found

  /conversationActions:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique actions from all conversations
      operationId: getUniqueActions
      responses:
        200:
          description: List of actions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Action

  /conversationEntities:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique entities from all conversations
      operationId: getUniqueEntities
      responses:
        200:
          description: List of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Entity

  /conversationIntents:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique intents from all conversations
      operationId: getUniqueIntents
      responses:
        200:
          description: List of intents
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Intent

  /conversationPolicies:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique Rasa Core policies in all conversations
      operationId: getUniquePolicies
      responses:
        200:
          description: List of policies
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Policy

  /conversations/slotNames:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique slot names used in all conversations
      operationId: getUniqueSlotNames
      responses:
        200:
          description: List of slot names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Slot name

  /conversations/slotValues:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique slot values used in all conversations
      operationId: getUniqueSlotValues
      parameters:
      - in: query
        name: q
        schema:
          type: string
        description: Slot value search string
      - in: query
        name: slot
        schema:
          type: string
        description: If specified, only values for this slot will be returned
      responses:
        200:
          description: List of slot values
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Slot value

  /conversations/inputChannels:
    get:
      tags:
      - Conversations
      summary: Fetch a list of unique input channels used in all conversations
      operationId: getUniqueInputChannels
      responses:
        200:
          description: List of input channels
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: Input channel

  /conversations/{conversation_id}/messages:
    get:
      tags:
      - Conversations
      summary: Fetch messages in conversation
      operationId: getMessages
      parameters:
      - $ref: '#/components/parameters/environment'
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/until'
      - $ref: '#/components/parameters/history'
      responses:
        200:
          description: Messages in conversation with conversation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        404:
          description: Conversation not found
    post:
      tags:
      - Conversations
      summary: Post a message to a conversation
      operationId: sendMessage
      parameters:
      - $ref: '#/components/parameters/environment'
      - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        200:
          description: Messages in conversation with conversation
          content:
            application/json:
              schema:
                type: array
                nullable: true
                items:
                  type: object
        404:
          description: Failed to send message

  /conversations/{conversation_id}/messages/{message_timestamp}/flag:
    put:
      tags:
      - Conversations
      summary: Flags this message
      operationId: flagMessage
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageTimestamp'
      responses:
        201:
          description: Flag was added successfully
    delete:
      tags:
      - Conversations
      summary: Remove a flag from a message
      operationId: deleteFlagFromConversation
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageTimestamp'
      responses:
        200:
          description: Flag was removed successfully

  /conversations/{conversation_id}/messages/{message_timestamp}/intent:
    put:
      tags:
      - Conversations
      summary: Correct message intent
      description: >-
        Corrects the intent of the message and possible adds it to the
        training data
      operationId: correctMessage
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageTimestamp'
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/environment'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                intent:
                  type: string
                  description: Name of the correct intent
                mapped_to:
                  type: string
                  description: Maps temporary intents to existing ones.
              required: ["intent"]
      responses:
        200:
          description: Message was corrected successfully
        400:
          description: An error happened while correcting the message intent
    delete:
      tags:
      - Conversations
      summary: Undo the correction of message
      operationId: removeMessageCorrection
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/messageTimestamp'
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Correction was successfully removed from message
        400:
          description: An error happened while undoing the correction

  /conversations/tags:
    get:
      tags:
        - Conversations
      summary: Return all existing conversations tags. Deprecated, use `/data_tags` instead.
      deprecated: True
      operationId: getTagsDeprecated
      responses:
        200:
          description: All tags were successfully retrieved (including empty result)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataTag'

  /conversations/{conversation_id}/tags:
    get:
      tags:
        - Conversations
      summary: Return data tags assigned to the conversation ID
      operationId: getTagsByConversationID
      parameters:
        - $ref: '#/components/parameters/conversationId'
      responses:
        200:
          description: Data tags were successfully retrieved (including empty result)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataTag'
        404:
          description: Conversation was not found
    post:
      tags:
        - Conversations
      summary: Assign data tags to a conversation
      description: >-
        Assign all data tags from the body of the request to the conversation.
        If data tags don’t exist yet, they will be created.
      operationId: postDataTagsConversation
      parameters:
        - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DataTagRequest'
      responses:
        200:
          description: All tags were successfully assigned to a conversation
        400:
          description: An error happened while assigning the tags

  /conversations/{conversation_id}/tags/{data_tag_id}:
    delete:
      tags:
        - Conversations
      summary: Remove tag from a conversation
      description: >-
        Remove a tag from a conversation.
      operationId: deleteDataTagsConversation
      parameters:
        - $ref: '#/components/parameters/conversationId'
        - $ref: '#/components/parameters/dataTagId'
      responses:
        204:
          description: Tag was successfully removed from a conversation
        404:
          description: Conversation or tag were not found

  /conversations/tags/{data_tag_id}:
    delete:
      tags:
        - Conversations
      summary: Delete conversation tag. Deprecated, use `/data_tags/{data_tag_id}` instead.
      deprecated: True
      description: >-
        Remove conversation tag from all conversations and then
        delete the tag completely
      operationId: deleteTagByIdDeprecated
      parameters:
        - $ref: '#/components/parameters/dataTagId'
      responses:
        204:
          description: Tag was successfully deleted
        404:
          description: Tag was not found

  /conversations/{conversation_id}/events:
    put:
      tags:
        - Messages
      summary: Update events in the tracker of a conversation
      operationId: updateEvent
      parameters:
      - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
      responses:
        200:
          description: Updated events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          description: >-
            The request body was invalid or an unexpected error happened
            when the request was processed
        401:
          description: The authentication failed
        403:
          description: User has insufficient permission.
        409:
          description: Tracker store for sender could not be found
    post:
      tags:
      - Messages
      summary: Create a new event in the tracker of a conversation
      operationId: createEvent
      parameters:
      - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        200:
          description: Created event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: >-
            The request body was invalid or an unexpected error happened
            when the request was processed
        401:
          description: The authentication failed
        403:
          description: User has insufficient permission.
        409:
          description: Tracker store for sender could not be found

  /conversations/{conversation_id}/execute:
    post:
      tags:
      - Messages
      summary: Run an action in a conversation.
      operationId: runAction
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/eventVerbosity'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Name of the action to be executed.
                  type: string
                policy:
                  description: Name of the policy that predicted the action (optional).
                  type: string
                confidence:
                  description: Confidence of the prediction (optional).
                  type: number
              required: ["name"]
      responses:
        200:
          description: Conversation tracker after executed action.
          content:
            application/json:
              schema:
                type: object
                properties:
                  tracker:
                    $ref: '#/components/schemas/Conversation'
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/BotMessage'
        400:
          description: >-
            The request body was invalid or an unexpected error happened
            when the request was processed
        401:
          description: The authentication failed
        403:
          description: User has insufficient permission.
        409:
          description: Tracker store for sender could not be found

  /conversations/{conversation_id}/predict:
    post:
      tags:
      - Evaluation
      summary: Predicts the next action in the conversation.
      operationId: predictNextAction
      parameters:
      - $ref: '#/components/parameters/conversationId'
      - $ref: '#/components/parameters/eventVerbosity'
      responses:
        200:
          description: Prediction of the next action was a success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PredictResult'
        403:
          description: User has insufficient permission.
        400:
          description: Action Exception

  /data_tags:
    get:
      tags:
        - DataTags
      summary: Return all existing data tags
      description: Return all existing data tags and information which conversations and messages they are assigned to.
      operationId: getTags
      responses:
        200:
          description: All data tags were successfully retrieved (including empty result)
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataTag'

  /data_tags/{data_tag_id}:
    delete:
      tags:
        - DataTags
      summary: Delete data tag
      description: >-
        Remove data tag from all conversations and then
        delete the tag completely.
      operationId: deleteTagById
      parameters:
        - $ref: '#/components/parameters/dataTagId'
      responses:
        204:
          description: Data tag was successfully deleted
        404:
          description: Data tag was not found

  /evaluate:
    post:
      tags:
      - Evaluation
      summary: Update Core evaluations for all conversations
      operationId: updateConversationEvaluations
      responses:
        204:
          description: Core evaluations were successfully updated
        400:
          description: Core evaluation for some conversations was not successful
        404:
          description: Some conversations were not found or their Core evaluations could not be stored

  /evaluations:
    get:
      tags:
      - Evaluation
      summary: Fetch list of Core evaluations
      operationId: getEvaluations
      responses:
        200:
          description: List of Core evaluations
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    '<conversation_id>':
                      $ref: '#/components/schemas/CoreEvaluationStoriesResult'


  /conversations/{conversation_id}/evaluation:
    get:
      tags:
        - Evaluation
      summary: Fetch Core evaluation for conversation
      operationId: getEvaluation
      parameters:
      - $ref: '#/components/parameters/conversationId'
      responses:
        200:
          description: Core evaluation was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreEvaluationStoriesResult'
    put:
      tags:
        - Evaluation
      summary: Updates Core evaluation for conversation against the currently loaded Rasa model
      operationId: putEvaluation
      parameters:
      - $ref: '#/components/parameters/conversationId'
      responses:
        200:
          description: Core evaluation was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoreEvaluationStoriesResult'
        400:
          description: Failed to create Core evaluation for conversation
        404:
          description: Conversation not found
    delete:
      tags:
        - Evaluation
      summary: Delete Core evaluation for conversation
      operationId: deleteEvaluation
      parameters:
      - $ref: '#/components/parameters/conversationId'
      responses:
        204:
          description: Core evaluation for conversation was deleted
        404:
          description: Conversation was not found

  /projects/{project_id}/evaluations:
    get:
      tags:
        - Evaluation
      summary: Fetch NLU evaluations for project
      operationId: getProjectEvaluations
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: NLU evaluations for project
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    intent_evaluation:
                      $ref: '#/components/schemas/NluEvaluation'
                    project_id:
                      type: string
                    model:
                      $ref: '#/components/schemas/Model'


  /projects/{project_id}/evaluations/{model}:
    put:
      tags:
        - Evaluation
      summary: Update NLU evaluation for model
      operationId: putEvaluationModel
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      responses:
        200:
          description: NLU evaluation for model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NluEvaluation'
        400:
          description: Failed to create NLU evaluation for model
        404:
          description: Could not find requested model
    get:
      tags:
        - Evaluation
      summary: Fetch NLU evaluation for model
      operationId: getEvaluationModel
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      responses:
        200:
          description: NLU evaluation for model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NluEvaluation'
        404:
          description: NLU evaluation for model was not found
    delete:
      tags:
        - Evaluation
      summary: Delete NLU evaluation for model
      operationId: deleteEvaluationModel
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/model'
      responses:
        204:
          description: NLU evaluation for model was deleted
        404:
          description: NLU evaluation for model was not found

  /insights/nlu:
    post:
      tags:
      - Insights
      summary: Creates a new NLU insight report
      operationId: postNLUInsightRport
      responses:
        201:
          description: Created NLU insight report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NLUInsightReport'
        202:
          $ref: '#/components/responses/NLUInsightCalculationInProgress'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
      - Insights
      summary: Gets NLU insight reports
      operationId: getNLUInsightReport
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - in: query
          name: status
          description: Filter by the report status
          schema:
            type: string
            enum:
            - in_progress
            - success
            - failure
            default: None
          required: false
      responses:
        200:
          description: List of NLU insight reports
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NLUInsightReport'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /insights/nlu/{insight_report_id}:
    get:
      tags:
      - Insights
      summary: Get full NLU insight report
      operationId: getNLUInsightReportFull
      parameters:
        - $ref: '#/components/parameters/insightReportId'
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sort_by'
        - $ref: '#/components/parameters/sort_order'
      responses:
        200:
          description: Full NLU insight report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NLUInsightReportFull'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /insights/nlu/{insight_report_id}/evaluation:
    get:
      tags:
      - Insights
      summary: Retrieves the Rasa Open Source cross-validation results for this report
      operationId: getRasaOpenSourceEvaluationResult
      parameters:
      - $ref: '#/components/parameters/insightReportId'
      responses:
        200:
          description: Rasa Open Source cross-validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NLUEvaluationResult'
        202:
          $ref: '#/components/responses/NLUInsightCalculationInProgress'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: The NLU insight for the specified ID could not be found
    post:
      tags:
      - Insights
      summary: Updates the NLU insight report with the evaluation
      operationId: postUpdateNLUInsightReportEvaluation
      parameters:
      - $ref: '#/components/parameters/insightReportId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NLUEvaluationResult'
      responses:
        200:
          description: Updated NLU insight
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NLUInsightReport'
        400:
          description: The provided NLU insight data is invalid.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: The NLU insight for the specified ID could not be found.

  /insights/config:
    put:
      tags:
      - Insights
      summary: Updates the intent insights configuration
      operationId: putInsightConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntentInsightConfig'
      responses:
        200:
          description: Updated the config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentInsightConfig'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    get:
      tags:
      - Insights
      summary: Gets the intent insights configuration
      operationId: getInsightConfig
      responses:
        200:
          description: The intent insights config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentInsightConfig'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /conversations/{conversation_id}/reviewStatus:
    put:
      tags:
        - Conversations
      summary: Update the review status of a conversation
      description: >-
        Update the review status of a conversation by setting it to 'unread',
        'reviewed' or 'saved_for_later'.
      operationId: putConversationReviewStatus
      parameters:
      - $ref: '#/components/parameters/conversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversationReviewStatus'
      responses:
        204:
          description: Conversation review status was successfully updated

  /analytics:
    get:
      tags:
      - Analytics
      summary: Fetch analytics
      operationId: userAnalytics
      parameters:
      - $ref: '#/components/parameters/start'
      - $ref: '#/components/parameters/end'
      - $ref: '#/components/parameters/window'
      responses:
        200:
          description: Analytics result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResult'
        404:
          $ref: '#/components/responses/AnalyticsNotFound'

  /statistics:
    get:
      tags:
      - Analyics
      summary: Fetch conversation statistics
      operationId: getConversationStatistics
      responses:
        200:
          description: Conversation statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationStatistics'
        404:
          description: Conversation not found

  /projects/{project_id}/data:
    get:
      tags:
      - NLU Data
      summary: >-
        Get training examples.
        Deprecated, use `/projects/{project_id}/training_data` instead.
      deprecated: True
      operationId: getDataDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      - in: query
        name: q
        description: Search string
        schema:
          type: string
      - in: query
        name: intent
        description: Intents to filter on
        schema:
          type: string
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - in: query
        name: sorted
        schema:
          type: boolean
      responses:
        200:
          description: Training examples for project
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total responses ignoring limit and offset
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrainingExample'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - NLU Data
      summary: Add new training example
      deprecated: True
      operationId: addDataDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingExample'
      responses:
        200:
          description: New training example
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingExample'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Example could not be saved
    put:
      tags:
      - NLU Data
      summary: Replace training data in bulk
      deprecated: True
      operationId: replaceBulkDataDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rasa_nlu_data:
                  type: object
                  properties:
                    common_examples:
                      type: array
                      items:
                        $ref: '#/components/schemas/TrainingExample'
          text/markdown:
            schema:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    enum:
                    - data uploaded
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/training_examples:
    get:
      tags:
        - NLU Data
      summary: Get training examples
      operationId: getExamples
      parameters:
        - $ref: '#/components/parameters/projectId'
        - in: query
          name: q
          description: Search string
          schema:
            type: string
        - in: query
          name: intent
          description: Intents to filter on
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - in: query
          name: sorted
          schema:
            type: boolean
      responses:
        200:
          description: Training examples for project
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total responses ignoring limit and offset
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TrainingExample'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - NLU Data
      summary: Add new training example(s), note that the no-array format is deprecated.
      operationId: addData
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TrainingExample'
                - type: object
                  properties:
                    examples:
                      type: array
                      items:
                        $ref: '#/components/schemas/TrainingExample'
      responses:
        200:
          description: New training example(s)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/TrainingExample'
                  - type: object
                    properties:
                      examples:
                        type: array
                        items:
                          $ref: '#/components/schemas/TrainingExample'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - NLU Data
      summary: Replace training data in bulk
      operationId: replaceBulkData
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rasa_nlu_data:
                  type: object
                  properties:
                    common_examples:
                      type: array
                      items:
                        $ref: '#/components/schemas/TrainingExample'
          text/markdown:
            schema:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    enum:
                      - data uploaded
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/regexes:
    get:
      tags:
      - NLU Data
      summary: Get all regular expression training data
      operationId: getRegexes
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Regex features for the given project
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RegexFeature'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - NLU Data
      summary: Create regular expression training data
      operationId: createRegex
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegexFeature'
      responses:
        201:
          description: Created regular expression including id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegexFeature'
        400:
          description: Regex with same pattern already exists or invalid body.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/regexes/{regex_id}:
    get:
      tags:
      - NLU Data
      summary: Get a regular expression by its id
      operationId: getRegexById
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/regexId'
      responses:
        200:
          description: Regexes for the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegexFeature'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Regex for id was not found
    put:
      tags:
      - NLU Data
      summary: Update an existing regular expression using its id
      operationId: updateRegexById
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/regexId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegexFeature'
      responses:
        201:
          description: Regex was updated successfully
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Regex for id was not found.
    delete:
      tags:
      - NLU Data
      summary: Delete a regular expression by its id
      operationId: deleteRegexById
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/regexId'
      responses:
        204:
          description: Regex was deleted successfully
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Regex for id was not found

  /projects/{project_id}/lookupTables:
    get:
      tags:
      - NLU Data
      summary: Get a list of lookup tables.
      operationId: getLookupTables
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: List of lookup tables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LookupTable'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - NLU Data
      summary: Create a lookup table from an uploaded file
      operationId: createLookupTable
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupTableFile'
      responses:
        201:
          description: Lookup table was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupTable'
        400:
          description: Invalid uploaded file.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/lookupTables/{lookup_table_id}:
    get:
      tags:
      - NLU Data
      summary: Get the content of a lookup table
      operationId: getLookupTableContent
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/lookupTableId'
      responses:
        200:
          description: Elements of lookup table with items separated by newlines.
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
      - NLU Data
      summary: Delete a lookup table
      operationId: deleteLookupTable
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/lookupTableId'
      responses:
        204:
          description: Lookup table was successfully deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/synonyms:
    get:
      tags:
      - NLU Data
      summary: Get all entity synonyms
      operationId: getEntitySynonyms
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/mappedValue'
      responses:
        200:
          description: List of entity synonyms.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySynonym'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - NLU Data
      summary: Create a new entity synonym with mapped values
      operationId: createEntitySynonym
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                synonym_reference:
                  type: string
                  description: The new text value for the entity synonym
                mapped_values:
                  type: array
                  items:
                    type: object
                    properties:
                      value:
                        type: string
      responses:
        201:
          description: Created entity synonym.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySynonym'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/synonyms/{entity_synonym_id}:
    get:
      tags:
      - NLU Data
      summary: Get an entity synonym
      operationId: getEntitySynonym
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      responses:
        200:
          description: An entity synonym.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySynonym'
        404:
          description: The entity synonym could not be found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - NLU Data
      summary: Map new values to an entity synonym
      operationId: createEntitySynonymValues
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mapped_values:
                  type: array
                  description: List of entity synonym values to map
                  items:
                    type: object
                    properties:
                      value:
                        type: string
      responses:
        201:
          description: The new values mapped to the entity synonym.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySynonymValue'
        400:
          description: >-
            One or more of the mapped values specified were repeated,
            or the mapped values array was empty,
            or one or more of the mapped values already existed,
            or the entity synonym could not be found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
      - NLU Data
      summary: Update an entity synonym's text value
      operationId: updateEntitySynonym
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                synonym_reference:
                  type: string
                  description: The new text value for the entity synonym
      responses:
        204:
          description: The entity synonym was updated successfully
        404:
          description: The entity synonym could not be found
        400:
          description: An entity synonym with that value already exists
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
      - NLU Data
      summary: Delete an entity synonym and all of its mapped values
      operationId: deleteEntitySynonym
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      responses:
        204:
          description: The entity synonym was deleted successfully
        404:
          description: The entity synonym could not be found
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/synonyms/{entity_synonym_id}/{entity_synonym_value_id}:
    put:
      tags:
      - NLU Data
      summary: Update a value mapped to an entity synonym
      operationId: updateEntitySynonymValue
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      - $ref: '#/components/parameters/entitySynonymValueId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: The new text value of the mapped value
      responses:
        204:
          description: The mapped value was updated successfully
        400:
          description: >-
            A mapped value with that value already exists,
            or the entity synonym could not be found,
            or the mapped value does not exist
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
      - NLU Data
      summary: Delete a value mapped to an entity synonym
      operationId: deleteEntitySynonymValue
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/entitySynonymId'
      - $ref: '#/components/parameters/entitySynonymValueId'
      responses:
        204:
          description: The mapped value was deleted successfully
        404:
          description: The entity synonym could not be found, or the mapped value does not exist
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/data.json:
    get:
      tags:
      - NLU Data
      summary: >-
        Download training examples in JSON format.
        Deprecated, use `/projects/{project_id}/training_data` instead.
      deprecated: True
      operationId: getDataJsonDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Attachment of training examples in JSON§
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/training_data:
    get:
      tags:
        - NLU Data
      summary: >-
        Download training examples in a format specified by `Accept` header.
        Default is `application/x-yaml`.
      operationId: getData
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/accept'
      responses:
        200:
          description: Attachment of training examples in YAML
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/data.md:
    get:
      tags:
      - NLU Data
      summary: >-
        Download training examples in markdown format.
        Deprecated, use `/projects/{project_id}/training_data` instead.
      deprecated: True
      operationId: getDataMarkdownDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Attachment of training examples in markdown
          headers:
            Content-Disposition:
              schema:
                type: string
          content:
            text/markdown:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/data/{example_id}:
    put:
      tags:
      - NLU Data
      summary: Update a training example by id
      deprecated: True
      operationId: updateExampleDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/exampleId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingExample'
      responses:
        200:
          description: Updated training example
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingExample'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Training example could not be updated
    delete:
      tags:
      - NLU Data
      summary: Delete a training example by id
      operationId: deleteDataDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/exampleId'
      responses:
        200:
          description: Confirmation of example being deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    description: Example {example_id} deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Training data could not be deleted

  /projects/{project_id}/training_examples/{example_id}:
    put:
      tags:
        - NLU Data
      summary: Update a training example by id
      operationId: updateExample
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/exampleId'
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingExample'
      responses:
        200:
          description: Updated training example
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingExample'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Training example could not be updated
    delete:
      tags:
        - NLU Data
      summary: Delete a training example by id
      operationId: deleteData
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/exampleId'
      responses:
        200:
          description: Confirmation of example being deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    description: Example {example_id} deleted
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Training data could not be deleted

  /projects/{project_id}/data/{hash}:
    get:
      tags:
      - NLU Data
      summary: Retrieve a training example by hash
      deprecated: True
      operationId: getExampleByHashDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/hash'
      responses:
        200:
          description: Training data example
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingExample'
        404:
          description: No training data found with specified hash

  /projects/{project_id}/training_examples/{hash}:
    get:
      tags:
        - NLU Data
      summary: Retrieve a training example by hash
      operationId: getExampleByHash
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/hash'
      responses:
        200:
          description: Training data example
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingExample'
        404:
          description: No training data found with specified hash

  /projects/{project_id}/dataWarnings:
    get:
      tags:
      - NLU Data
      summary: >-
        Get warnings about training data.
        Deprecated, use `/projects/{project_id}/training_data_warnings` instead.
      deprecated: True
      operationId: getDataWarningsDeprecated
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Warnings about training data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataWarning'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/training_data_warnings:
    get:
      tags:
        - NLU Data
      summary: Get warnings about training data.
      operationId: getDataWarnings
      parameters:
        - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Warnings about training data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataWarning'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/entities:
    get:
      tags:
      - NLU Data
      summary: Available entities
      description: Unique entity types present in the training data.
      operationId: getEntities
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Unique entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/intents:
    get:
      tags:
      - Intents
      summary: List intents
      description: Intents used in training examples, domain, or temporary intents
      operationId: getIntents
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/is_temporary'
      responses:
        200:
          description: Intents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IntentInformation'

  /projects/{project_id}/settings:
    get:
      tags:
        - Model config
      summary: Fetch model config
      operationId: getModelConfig
      parameters:
        - $ref: '#/components/parameters/projectId'
        - $ref: '#/components/parameters/api_token'
      responses:
        200:
          $ref: '#/components/responses/ModelConfig'
        400:
          description: could not find settings
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
        - Model config
      summary: Save model config
      operationId: saveModelConfig
      parameters:
        - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              description: Model config as YAML string
              type: string
      responses:
        200:
          $ref: '#/components/responses/ModelConfig'
        400:
          description: Could not parse/save config file
        422:
          description: Config missing mandatory keys

  /templates:
    get:
      tags:
      - Responses
      summary: Get bot responses (Deprecated, use `/responses` instead.)
      deprecated: True
      operationId: getTemplatesDeprecated
      parameters:
      - in: query
        name: q
        schema:
          type: string
        description: Response text search string
      - $ref: '#/components/parameters/responseName_query'
      - $ref: '#/components/parameters/template_query_deprecated'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: Bot responses
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total responses ignoring limit and offset
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: '#/components/schemas/BotResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Responses
      summary: Add new response (Deprecated, use `/responses` instead.)
      deprecated: true
      operationId: createTemplateDeprecated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotResponse_templates_deprecated'
      responses:
        201:
          description: Response ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotResponse'
        400:
          description: >-
            Could not add the specified response. A response with this combination of
            (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: >-
            Could not add the specified response. The response name does not begin with
            the 'utter_' prefix.
    put:
      tags:
      - Responses
      summary: Replace responses (Deprecated, use `/responses` instead.)
      deprecated: true
      operationId: replaceTemplatesDeprecated
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BotResponse_templates_deprecated'
      responses:
        200:
          description: Responses were successfully replaced
        400:
          description: >-
            Could not replace the specified response. A response with this
            combination of (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: >-
            Could not replace the specified responses. At least one of the response
            names does not begin with the 'utter_' prefix.

  /templates/{response_id}:
    put:
      tags:
      - Responses
      summary: Modify response (Deprecated, use `/responses/{response_id}` instead.)
      deprecated: true
      operationId: modifyTemplateDeprecated
      parameters:
      - $ref: '#/components/parameters/responseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotResponse_templates_deprecated'
      responses:
        200:
          description: Modified response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotResponse'
        400:
          description: >-
            Could not modify the specified response. A response with this combination of
            (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: The response for the specified ID could not be found.
        422:
          description: >-
            Could not replace the specified responses. At least one of the response
            names does not begin with the 'utter_' prefix.
    delete:
      tags:
      - Responses
      summary: Delete a response (Deprecated, use `/responses/{response_id}` instead.)
      deprecated: true
      operationId: deleteTemplateDeprecated
      parameters:
      - $ref: '#/components/parameters/responseId'
      responses:
        204:
          description: Delete OK
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Response not found

  /responses:
    get:
      tags:
      - Responses
      summary: Get bot responses
      operationId: getResponses
      parameters:
      - in: query
        name: q
        schema:
          type: string
          description: Response text search string
      - $ref: '#/components/parameters/responseName_query'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: Bot responses
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: Total responses ignoring limit and offset
          content:
            application/json:
              schema:
                type: object
                properties:
                  responses:
                    type: array
                    items:
                      $ref: '#/components/schemas/BotResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Responses
      summary: Add new response
      operationId: createResponse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotResponse'
      responses:
        201:
          description: Response ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotResponse'
        400:
          description: >-
            Could not add the specified response. A response with this combination of
            (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: >-
            Could not add the specified response. The response name does not begin with
            the 'utter_' prefix.
    put:
      tags:
      - Responses
      summary: Replace responses
      operationId: replaceResponses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BotResponse'
      responses:
        200:
          description: Responses were successfully replaced
        400:
          description: >-
            Could not replace the specified response. A response with this
            combination of (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: >-
            Could not replace the specified responses. At least one of the response
            names does not begin with the 'utter_' prefix.

  /responses/{response_id}:
    put:
      tags:
      - Responses
      summary: Modify response
      operationId: modifyResponse
      parameters:
      - $ref: '#/components/parameters/responseId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotResponse'
      responses:
        200:
          description: Modified response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotResponse'
        400:
          description: >-
            Could not modify the specified response. A response with this combination of
            (response name, text) already exists.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: The response for the specified ID could not be found.
        422:
          description: >-
            Could not replace the specified responses. At least one of the response
            names does not begin with the 'utter_' prefix.
    delete:
      tags:
      - Responses
      summary: Delete a response
      operationId: deleteResponse
      parameters:
      - $ref: '#/components/parameters/responseId'
      responses:
        204:
          description: Delete OK
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Response not found

  /responseGroups:
    get:
      tags:
      - Responses
      summary: Get responses grouped by response name.
      operationId: getResponseGroups
      parameters:
      - $ref: '#/components/parameters/q'
      - $ref: '#/components/parameters/responseName_query'
      - $ref: '#/components/parameters/intersectFilters_query'
      - $ref: '#/components/parameters/preciseResponseNameSearch_query'
      - $ref: '#/components/parameters/template_query_deprecated'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: Grouped responses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    response_name:
                      type: string
                    responses:
                      type: array
                      items:
                        $ref: '#/components/schemas/BotResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /responseGroups/{response_name}:
    put:
      tags:
      - Responses
      summary: Bulk rename a response group.
      operationId: renameResponses
      parameters:
      - $ref: '#/components/parameters/responseName'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
      responses:
        200:
          description: Response group was succesfully renamed.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /rules:
    get:
      tags:
      - Rules
      summary: Get all rules
      operationId: getRules
      parameters:
      - $ref: '#/components/parameters/q'
      - $ref: '#/components/parameters/limit'
      - $ref: '#/components/parameters/offset'
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Rasa Core rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreRuleObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Rules
      summary: Create rules
      operationId: createRules
      requestBody:
        required: true
        content:
          text/yaml:
            schema:
              type: string
      responses:
        200:
          description: Rasa Core rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreRuleObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Replace all rules
      operationId: replaceRules
      tags:
      - Rules
      requestBody:
        required: true
        content:
          text/yaml:
            schema:
              type: string
      responses:
        200:
          description: Rasa Core rules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreRuleObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /rules/{rule_id}:
    put:
      summary: Replace a rule
      tags:
      - Rules
      operationId: replaceRule
      requestBody:
        required: true
        content:
          text/yaml:
            schema:
              type: string
      parameters:
      - $ref: '#/components/parameters/ruleId'
      responses:
        200:
          description: Rasa Core rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RasaCoreRuleObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete a rule
      tags:
      - Rules
      operationId: deleteRule
      parameters:
      - $ref: '#/components/parameters/ruleId'
      responses:
        204:
          description: Rule was deleted successfully
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /stories:
    get:
      tags:
      - Stories
      summary: Get saved stories
      operationId: getStories
      parameters:
      - in: query
        name: q
        description: Search string
        schema:
          type: string
      responses:
        200:
          description: Rasa Core stories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreStoryObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Stories
      summary: Upload stories
      operationId: uploadStories
      parameters:
      - in: query
        name: test_stories
        description: When `true`, stories will be uploaded as test stories. They will not be part of the training data.
        schema:
          type: boolean
          default: false
      requestBody:
        required: true
        content:
          text/yaml:
            schema:
              type: string
          text/markdown:
            schema:
              type: string
              example: >-
                ## happy path

                * greet
                  - utter_greet
                * mood_great
                  - utter_happy

                ## sad path 1

                * greet
                  - utter_greet
                * mood_unhappy
                  - utter_cheer_up
                  - utter_did_that_help
                * affirm
                  - utter_happy
      responses:
        200:
          description: Uploaded stories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreStoryObject'
        400:
          description: Stories could not be uploaded
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
      - Stories
      summary: Replace stories
      operationId: replaceStories
      requestBody:
        required: true
        content:
          text/markdown:
            schema:
              type: string
              example: >-
                ## happy path

                * greet
                  - utter_greet
                * mood_great
                  - utter_happy

                ## sad path 1

                * greet
                  - utter_greet
                * mood_unhappy
                  - utter_cheer_up
                  - utter_did_that_help
                * affirm
                  - utter_happy
      responses:
        200:
          description: Uploaded stories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreStoryObject'
        400:
          description: Stories could not be uploaded
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /stories.md:
    get:
      tags:
      - Stories
      summary: Get stories as markdown file
      operationId: getStoriesAsMarkdown
      deprecated: True
      parameters:
      - in: query
        name: q
        description: Search string
        schema:
          type: string
      responses:
        200:
          description: Rasa Core stories as markdown file
          content:
            text/markdown:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /stories/{story_id}:
    put:
      tags:
      - Stories
      summary: Modify Rasa Core story
      operationId: modifyStory
      parameters:
      - $ref: '#/components/parameters/storyId'
      requestBody:
        required: true
        content:
          text/markdown:
            schema:
              type: string
      responses:
        200:
          description: Modified Rasa Core story
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RasaCoreStoryObject'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
      - Stories
      summary: Delete a Rasa Core Story
      operationId: deleteStory
      parameters:
      - $ref: '#/components/parameters/storyId'
      responses:
        204:
          description: Delete OK
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /tests:
    post:
      tags:
        - Tests
      summary: >-
        Use the `POST /stories` endpoint instead, specifying `test_stories=true`.
      operationId: uploadTests
      deprecated: true
      requestBody:
        required: true
        content:
          text/yaml:
            schema:
              type: string
          text/markdown:
            schema:
              type: string
      responses:
        200:
          description: Test stories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RasaCoreStoryObject'
        400:
          description: Test stories could not be saved.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /roles:
    get:
      tags:
      - Roles
      summary: List user roles
      operationId: listRoles
      parameters:
      - $ref: '#/components/parameters/username_query'
      - $ref: '#/components/parameters/role_query'
      responses:
        200:
          description: List of roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    post:
      tags:
      - Roles
      summary: Create new role
      operationId: createRole
      requestBody:
        description: Role object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        201:
          description: Created role

  /roles/{role}:
    put:
      tags:
      - Roles
      summary: Update role
      operationId: updateRole
      parameters:
      - $ref: '#/components/parameters/role'
      requestBody:
        required: true
        description: Role object to be updated
        content:
          application/json:
            schema:
              type: object
              properties:
                grants:
                  type: object
                  properties:
                    category:
                      type: string
                    actions:
                      type: array
                      items:
                        type: string
                name:
                  type: string
                is_default:
                  description: >-
                    Whether this role is the default role assigned to new
                    enterprise users
                  type: boolean
                description:
                  description: Role description
                  type: string
                users_count:
                  description: Number of users having this role
                  type: number
      responses:
        200:
          description: Updated role object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        401:
          description: Failed to validate schema for update_role
        404:
          description: Role does not exist

    delete:
      tags:
      - Roles
      summary: Delete role
      operationId: deleteRole
      parameters:
      - $ref: '#/components/parameters/role'
      responses:
        200:
          description: Successfully deleted role
        404:
          description: Role does not exist
    get:
      tags:
      - Roles
      summary: Return role
      operationId: getRole
      parameters:
      - $ref: '#/components/parameters/role'
      responses:
        200:
          description: Role object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        404:
          description: Role does not exist

  /roles/{role}/users:
    get:
      tags:
      - Roles
      summary: Get list of users for specified role
      operationId: listRoleUsers
      parameters:
      - $ref: '#/components/parameters/role'
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    put:
      tags:
      - Roles
      summary: Update users associated with {role}
      operationId: updateRoleUsers
      parameters:
      - $ref: '#/components/parameters/role'
      requestBody:
        required: true
        description: List of usernames to be be associated with role
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: Username
      responses:
        200:
          description: List of users for {role}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: Role does not exist

  /users/{username}/roles:
    get:
      tags:
      - Roles
      summary: Get user roles
      operationId: getUserRoles
      parameters:
      - $ref: '#/components/parameters/username'
      responses:
        200:
          description: User roles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update user roles
      operationId: updateUserRoles
      parameters:
      - $ref: '#/components/parameters/username'
      requestBody:
        required: true
        description: List of roles to be be associated with {username}
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                description: Role
      responses:
        200:
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: One or more roles do not exist

  /users/{username}/roles/{role}:
    delete:
      tags:
      - Roles
      summary: Delete user role
      operationId: deleteUserRole
      parameters:
      - $ref: '#/components/parameters/username'
      - $ref: '#/components/parameters/role'
      responses:
        200:
          description: Deleted user role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /chat:
    post:
      tags:
      - Conversations
      summary: Endpoint to have a conversation with the assistant
      operationId: putChat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - message
              properties:
                message:
                  type: string
      responses:
        200:
          description: Bot response
          content:
            application/json:
              schema:
                type: array
                nullable: true
                items:
                  type: object
        404:
          description: Message send failed

  /chatToken:
    put:
      tags:
      - Chat Token
      summary: Update a bot's name and description for token
      operationId: updateChatToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatToken'
      responses:
        200:
          description: Bot_name, description and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatToken'
        400:
          $ref: '#/components/responses/SchemaValidationError'

    get:
      tags:
      - Chat Token
      summary: Get chat_token, bot_name and description
      operationId: getChatToken
      parameters:
      - $ref: '#/components/parameters/access_token'
      responses:
        200:
          description: Bot_name, description and token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatToken'
        403:
          description: Invalid jwt token or key

  /config:
    get:
      tags:
      - Runtime config
      summary: Retrieve Rasa runtime configuration
      operationId: getRuntimeConfig
      responses:
        200:
          description: >-
            Rasa runtime configuration. This configuration contains the channel
            credentials and the endpoint configuration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  credentials:
                    description: Runtime credentials config as YAML string
                    type: string
                  endpoints:
                    description: Runtime endpoints config as YAML string
                    type: string
        400:
          description: Could not fetch runtime configs from files
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /environments:
    get:
      tags:
      - Environments
      summary: Retrieve Platform deployment environment metadata
      operationId: getEnvironmentsConfig
      responses:
        200:
          description: Deployment environment configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  environments:
                    description: YAML string
                    type: string
        400:
          description: Could not find environment settings
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
      - Environments
      summary: Save Platform deployment environment config
      operationId: saveEnvironmentsConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                environments:
                  description: YAML string
                  type: string
      responses:
        200:
          description: Saved configuration of Platform deployment environments
          content:
            application/json:
              schema:
                type: object
                properties:
                  environments:
                    description: YAML string
                    type: string
        400:
          description: Could not find settings
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /features:
    get:
      tags:
      - Feature Flags
      summary: Retrieve all features flags
      operationId: getFeatureFlags
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureFlag'
    post:
      tags:
      - Feature Flags
      summary: Update or create a feature flag
      operationId: updateFeatureFlag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeatureFlag'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlag'
        400:
          $ref: '#/components/responses/SchemaValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /domain:
    get:
      tags:
      - Domain
      summary: Retrieve Rasa domain
      deprecated: true
      description: >-
        Deprecated, use `/domains` instead.
      operationId: getDomain
      responses:
        200:
          $ref: '#/components/responses/RasaDomain'
        400:
          description: Could not find domain
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      tags:
      - Domain
      summary: Update Rasa domain
      deprecated: true
      description: >-
        Deprecated, use `/domains/{id}` instead.
      operationId: updateDomain
      parameters:
      - in: query
        name: store_responses
        schema:
          type: boolean
          default: false
        required: false
        description: >-
          Specifies whether to store the responses from the uploaded domain.
      - in: query
        name: store_templates
        deprecated: true
        schema:
          type: boolean
          default: false
        required: false
        description: >-
          Deprecated, use `store_responses` instead.
      - $ref: '#/components/parameters/api_token'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              description: Domain as YAML string
              type: string
      responses:
        200:
          $ref: '#/components/responses/RasaDomain'
        400:
          description: Could not find domain
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /domains:
      get:
        tags:
        - Domain
        summary: Retrieve All Rasa domains
        operationId: getDomains
        responses:
          200:
            description: Rasa domains
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      filename:
                        type: string
                      content_yaml:
                        $ref: '#/components/schemas/RasaDomain'
          401:
            $ref: '#/components/responses/UnauthorizedError'
      post:
        tags:
        - Domain
        summary: Save a new Rasa domain
        operationId: postDomains
        parameters:
        - in: query
          name: store_responses
          schema:
            type: boolean
            default: false
          required: false
          description: >-
            Specifies whether to store the responses from the uploaded domain.
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  content_yaml:
                    $ref: '#/components/schemas/RasaDomain'
        responses:
          200:
            description: Rasa domains
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: integer
                    filename:
                      type: string
                    content_yaml:
                      $ref: '#/components/schemas/RasaDomain'
          409:
            description: Domain with the same `filename` already exists.

  /domains/{id}:
      put:
        tags:
          - Domain
        summary: Update Rasa domain
        description: >-
          Creates or updates a Rasa domain with a specified ID.
        operationId: updateDomains
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
            description: The unique ID of the target domain file.
          - in: query
            name: store_responses
            schema:
              type: boolean
              default: false
            required: false
            description: >-
              Specifies whether to store the responses from the uploaded domain.
          - $ref: '#/components/parameters/api_token'
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  content_yaml:
                    $ref: '#/components/schemas/RasaDomain'
        responses:
          200:
            description: Rasa domains
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    filename:
                      type: string
                    content_yaml:
                      $ref: '#/components/schemas/RasaDomain'
          400:
            description: Failed to update domain.
          401:
            $ref: '#/components/responses/UnauthorizedError'
          404:
            description: Domain with the specified ID was not found.
          409:
            description: Domain with the same `filename` already exists.
      delete:
        tags:
          - Domain
        summary: Delete Rasa domain with a specified ID.
        operationId: deleteDomains
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: string
            description: The ID of the target domain file.
        responses:
          201:
            description: Rasa domain was succesfully removed.
          401:
            $ref: '#/components/responses/UnauthorizedError'
          404:
            description: Domain with the specified ID was not found.

  /projects/{project_id}/actions:
    get:
      tags:
      - Domain
      summary: Retrieve Rasa domain actions
      operationId: getDomainActions
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Rasa domain actions
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: action name
        400:
          description: Could not find domain
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Domain
      summary: Create new action
      operationId: createAction
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        201:
          description: Created action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          description: Action already exists
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/actions/{action_id}:
    put:
      tags:
      - Domain
      summary: Update action
      operationId: updateAction
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/actionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        200:
          description: Action updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        404:
          description: Action for id was not found
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
      - Domain
      summary: Delete action
      operationId: deleteAction
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/actionId'
      responses:
        204:
          description: Action deleted successfully
        404:
          description: Action for id was not found
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /domainWarnings:
    get:
      tags:
      - Domain
      summary: Retrieve Rasa domain warnings.
      description: >-
        In case of a multiple domains project, returns all warnings for all domains.
      operationId: getDomainWarnings
      responses:
        200:
          description: Rasa domain warnings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainWarnings'
        400:
          description: Could not find domain
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /projects/{project_id}/git_repositories:
    get:
      tags:
      - Git
      summary: List connected Git repositories
      operationId: listGitRepositories
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Stored Git repository credentials
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitRepository'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
      - Git
      summary: Store credentials for a Git repository
      operationId: createGitRepository
      parameters:
      - $ref: '#/components/parameters/projectId'
      requestBody:
        description: Credentials for the repository
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitRepository'
      responses:
        201:
          description: Created Git repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitRepository'
        400:
          $ref: '#/components/responses/ProjectLayoutError'
        409:
          description: >-
            Repository creation failed due to having specified an HTTPS URL when Rasa
            Enterprise is not installed.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Repository creation failed due to invalid credentials

  /projects/{project_id}/git_repositories/{repository_id}:
    get:
      tags:
      - Git
      summary: Get information about a connected Git repository
      operationId: getGitRepository
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      responses:
        200:
          description: Stored Git repository credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitRepository'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Repository with given id was not found
    put:
      tags:
      - Git
      summary: Update information for a connected Git repository
      operationId: updateGitRepository
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      requestBody:
        description: Updated values for the repository
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitRepository'
      responses:
        200:
          description: Updated Git repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitRepository'
        409:
          description: >-
            Repository update failed due to having specified an HTTPS URL when Rasa
            Enterprise is not installed.
        400:
          $ref: '#/components/responses/ProjectLayoutError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Repository with given id was not found
    delete:
      tags:
      - Git
      summary: Delete repository
      operationId: deleteGitRepository
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      responses:
        204:
          description: Deletion was successful
          content:
            text/plain:
              schema:
                type: string
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Repository with given id was not found

  /projects/{project_id}/git_repositories/{repository_id}/status:
    get:
      tags:
      - Git
      summary: Get the status of the Git repository
      operationId: getRepositoryStatus
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      responses:
        200:
          description: Status of the repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitStatus'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Repository with given id was not found

  /projects/{project_id}/git_repositories/{repository_id}/branches/{branch_name}:
    put:
      tags:
      - Git
      summary: Checkout a different branch
      operationId: checkoutBranch
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/branchName'
      - $ref: '#/components/parameters/forceCheckout'
      responses:
        204:
          description: Branch was checked out successfully
          content:
            text/plain:
              schema:
                type: string
        400:
          $ref: '#/components/responses/ProjectLayoutError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Branch for repository with given id was not found

  /projects/{project_id}/git_repositories/{repository_id}/branches/{branch_name}/commits:
    post:
      tags:
      - Git
      summary: Stages, commits and pushes changes.
      operationId: createCommit
      parameters:
      - $ref: '#/components/parameters/projectId'
      - $ref: '#/components/parameters/repositoryId'
      - $ref: '#/components/parameters/branchName'
      requestBody:
        description: Details of the commit
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitCommit'
      responses:
        201:
          description: Changes were successfully committed and pushed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Commit couldn't be created
        404:
          description: Branch for repository with given id was not found
        409:
          description: Branch already exists or there is another commit operation in progress

  /projects/{project_id}/git_repositories/public_ssh_key:
    get:
      tags:
      - Git
      summary: Get a generated public SSH key from Rasa X
      operationId: generatePublicSSHKey
      parameters:
      - $ref: '#/components/parameters/projectId'
      responses:
        200:
          description: Stored Git repository credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  public_ssh_key:
                    type: string
                    description: The generated public SSH key in OpenSSH format.
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /telemetry:
    get:
      tags:
      - Telemetry
      summary: Access the current telemetry configuration.
      operationId: getTelemetry
      parameters:
      - $ref: '#/components/parameters/api_token'
      - in: query
        name: include_user_groups
        schema:
          type: boolean
          default: false
        required: false
        description: When true, include user groups in response
      responses:
        200:
          description: Current telemetry configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  telemetry_enabled:
                    type: boolean
                    example: true
                  user_groups:
                    type: array
                    items:
                      type: string
                  user_id:
                    type: string
    delete:
      tags:
      - Telemetry
      summary: Disable telemetry in server mode.
      description: >-
        Disable telemetry if Rasa X is running in server mode.
        After calling this endpoint, the Rasa X server must be
        restarted in order for the changes to take effect.
      operationId: disableTelemetry
      parameters:
      - $ref: '#/components/parameters/api_token'
      responses:
        200:
          description: Telemetry configuration was updated, or was already disabled
        400:
          description: If Rasa X is running in local mode.

security:
- bearerAuth: []

components:

  parameters:

    conversationId:
      in: path
      name: conversation_id
      example: conversation_id
      description: Sender ID
      schema:
        type: string
      required: true
    dataTagId:
      in: path
      name: data_tag_id
      example: data_tag_id
      description: Data tag ID
      schema:
        type: number
      required: true
    projectId:
      in: path
      name: project_id
      example: default
      description: Project ID
      schema:
        type: string
      required: true
    logId:
      in: path
      name: log_id
      example: 1
      description: Message ID
      schema:
        type: string
      required: true
    messageTimestamp:
      in: path
      name: message_timestamp
      schema:
        type: number
      required: true
    username:
      in: path
      name: username
      schema:
        type: string
      required: true
    environment:
      in: query
      name: environment
      schema:
        type: string
      required: false
      description: Deployment environment to be used in query
    role:
      in: path
      name: role
      schema:
        type: string
      required: true
    model:
      in: path
      name: model
      description: Model name
      schema:
        type: string
      required: true
    tag:
      in: path
      name: tag
      description: Model tag
      schema:
        type: string
      required: true
    offset:
      in: query
      name: offset
      schema:
        default: 0
        type: number
    limit:
      in: query
      name: limit
      schema:
        default: null
        type: number
    sort_by:
      in: query
      name: sort_by
      schema:
        type: string
    sort_order:
      in: query
      name: sort_order
      schema:
        type: string
    modelTag:
      in: query
      name: tag
      description: Model tag
      schema:
        default: null
        type: string
    start:
      in: query
      name: start
      example: '2018-01-01T11:03:01.141'
      description: >-
        Start time. Accepts ISO-8601 format (as in the example) or Unix time.
      schema:
        type: string
      required: true
    end:
      in: query
      name: end
      example: '2018-11-02T13:44:09.932'
      description: >-
        End time. Accepts ISO-8601 format (as in the example) or Unix time.
      schema:
        type: string
      required: true
    window:
      in: query
      name: window
      example: 1d
      description: >-
        Bin size used in the accumulation of the requested analytics result.
        If not specified, 10 bins are returned by default.
        Multiple formats are supported. A full list is available
        at https://pypi.org/project/pytimeparse/1.1.8/.
      schema:
        type: string
      required: true
    responseId:
      in: path
      name: response_id
      example: 5
      description: Response ID
      schema:
        type: integer
      required: true
    exampleId:
      in: path
      name: example_id
      example: 5bb89a7f3b18fb3d95495f30
      description: Example ID
      schema:
        type: string
      required: true
    storyId:
      in: path
      name: story_id
      example: 5bb89a7f3b18fb3d95495f31
      description: Story ID
      schema:
        type: string
      required: true
    ruleId:
      in: path
      name: rule_id
      description: Rule ID
      required: true
      schema:
        type: string
    hash:
      in: path
      name: hash
      example: b10a8db164e0754105b7a99be72e3fe5
      description: MD5 hash of an NLU example's text field
      schema:
        type: string
      required: true
    actionId:
      name: action_id
      in: path
      description: Unique ID of an action
      required: true
      schema:
        type: string
    regexId:
      name: regex_id
      in: path
      required: true
      schema:
        type: number
    lookupTableId:
      name: lookup_table_id
      in: path
      required: true
      schema:
        type: number
    entitySynonymId:
      name: entity_synonym_id
      in: path
      description: ID of an entity synonym
      required: true
      schema:
        type: number
    entitySynonymValueId:
      name: entity_synonym_value_id
      in: path
      description: ID of a value mapped to the entity synonym
      required: true
      schema:
        type: number
    responseName:
      name: response_name
      description: Current response name
      in: path
      required: true
      schema:
        type: string
    repositoryId:
      name: repository_id
      in: path
      required: true
      schema:
        type: number
    branchName:
      name: branch_name
      in: path
      required: true
      schema:
        type: string
    q:
      in: query
      name: q
      description: Query string
      schema:
        type: string
    responseName_query:
      in: query
      name: response_name
      schema:
        type: string
      description: Response names to filter on (comma-separated)
    intersectFilters_query:
      in: query
      name: intersect_filters
      required: false
      schema:
        type: boolean
        default: true
      description: If `True`, join the conditions with an `AND`. Use `OR` otherwise.
    preciseResponseNameSearch_query:
      in: query
      name: precise_response_name_search
      required: false
      schema:
        type: boolean
        default: true
      description: If `False`, search for `response_name` using `LIKE` operator.
    template_query_deprecated:
      in: query
      name: template
      deprecated: true
      schema:
        type: string
      description: Deprecated, use `response_name` instead.
    eventVerbosity:
      in: query
      name: include_events
      schema:
        type: string
        enum:
        - ALL
        - AFTER_RESTART
        - NONE
        default: ALL
      required: false
    intent:
      in: query
      name: intent
      schema:
        type: string
        default: null
      required: false
      description: Comma-separated intents to filter on
    username_query:
      in: query
      name: username
      schema:
        type: string
      required: false
      description: Username pattern to search
    role_query:
      in: query
      name: role
      schema:
        type: string
      required: false
      description: Comma-separated roles to filter on
    is_temporary:
      in: query
      name: temporary
      description: If `True` the query will also include temporary intents
      schema:
        type: boolean
      required: false
    access_token:
      name: access_token
      in: header
      description: A user's jwt token
      required: true
      schema:
        type: string
    api_token:
      name: api_token
      in: query
      description: A user's api token
      required: false
      schema:
        type: string
    until:
      in: query
      name: until
      schema:
        type: number
        default: null
      required: false
      description: Include only events with a timestamp before `until`
    since:
      in: query
      name: since
      schema:
        type: number
        default: null
      required: false
      description: Include only events with a timestamp after `since`
    history:
      in: query
      required: false
      name: history
      description: Whether to include data before the last restart event
      schema:
        type: boolean
    forceCheckout:
      in: query
      required: false
      name: force
      description: Whether to discard potential local changes or not
      schema:
        type: boolean
    mappedValue:
      in: query
      required: false
      name: mapped_value
      description: Query for synonyms which have the mapped value mapped to them.
      schema:
        type: string
    exclude_leading_action_session_start:
      in: query
      required: false
      name: exclude_leading_action_session_start
      description: Whether to exclude a leading event of type action_session_start
      schema:
        type: boolean
        default: false
    deleteCreatedConversations:
      in: query
      required: false
      name: deleteCreatedConversations
      description: >-
        When deleting users, whether to delete interactive learning conversations
        created by that user.
      schema:
        type: boolean
        default: false
    accept:
      in: header
      required: false
      name: Accept
      description: >-
        Specifies which content types, expressed as MIME types, the client
        is able to understand. Typically used in this API to specify the requested
        data format: `application/x-yaml` for YAML, `application/json` for json
        and `text/markdown` for markdown.
      schema:
        type: string
    insightReportId:
      name: insight_report_id
      in: path
      description: ID of an insight report
      required: true
      schema:
        type: number

  responses:

    AnalyticsNotFound:
      description: Analytics not found
      content:
        application/json:
          schema:
            type: object
            properties:
              exception:
                type: string
              reasons:
                oneOf:
                - type: string

    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              exception:
                type: string
              reasons:
                oneOf:
                - type: string
                - type: array
                  items:
                    type: string

    NLUInsightCalculationInProgress:
      description: NLU insight calculation is in progress and not yet finished.
      content:
        application/json:
          schema:
            type: object
            properties:
              exception:
                type: string
              reasons:
                oneOf:
                - type: string

    ProjectLayoutError:
      description: The checked out repository does not contain a valid Rasa project.
      content:
        application/json:
          schema:
            type: object
            properties:
              exception:
                type: string
              reasons:
                oneOf:
                - type: string

    SchemaValidationError:
      description: The request body has an invalid schema.
      content:
        application/json:
          schema:
            type: object
            properties:
              exception:
                type: string
              reasons:
                oneOf:
                - type: string
                - type: array
                  items:
                    type: string

    RasaDomain:
      description: Rasa domain
      content:
        text/plain:
          schema:
            description: Domain as yaml
            type: string

    ModelConfig:
      description: Rasa model config
      content:
        text/plain:
          schema:
            description: Model config as yaml
            type: string

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    AnalyticsResult:
      type: object
      properties:
        bin_centers:
          type: array
          description: Timestamps of bin_centers
          items:
            type: number
        bin_width:
          type: number
          description: Width of each bin in seconds
        new_users:
          type: array
          description: Number of new users
          items:
            type: number
        conversations:
          type: array
          description: Number of active conversations
          items:
            type: number
        user_messages:
          type: array
          description: Number of user messages
          items:
            type: number
        bot_messages:
          type: array
          description: Number of bot messages
          items:
            type: number
        total_messages:
          type: array
          description: Total number of user and bot messages
          items:
            type: number
        sessions_per_user:
          type: array
          description: Average number of sessions per user
          items:
            type: number
        conversation_length:
          type: array
          description: Average conversation length
          items:
            type: number
        conversation_steps:
          type: array
          description: Average number of conversation steps
          items:
            type: number

    Intent:
      type: object
      properties:
        confidence:
          type: integer
        name:
          type: string

    ParseData:
      type: object
      properties:
        entities:
          type: array
          items:
            type: object
        intent:
          $ref: '#/components/schemas/Intent'
        intent_ranking:
          type: array
          items:
            $ref: '#/components/schemas/Intent'
        text:
          type: string

    ActionEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - action
        name:
          type: string
        timestamp:
          type: integer
        metadata:
          $ref: '#/components/schemas/EventMetadata'

    UserEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - user
        parse_data:
          $ref: '#/components/schemas/ParseData'
        text:
          type: string
        timestamp:
          type: integer
        is_flagged:
          type: boolean
          default: false
          description: True if message was flagged.
        metadata:
          $ref: '#/components/schemas/EventMetadata'

    BotEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - bot
        data:
          type: object
          nullable: true
        text:
          type: string
        timestamp:
          type: integer
        is_flagged:
          type: boolean
          default: false
          description: True if message was flagged.
        metadata:
          $ref: '#/components/schemas/EventMetadata'

    RestartEvent:
      type: object
      properties:
        event:
          type: string
          enum:
          - restart
        timestamp:
          type: integer
        metadata:
          $ref: '#/components/schemas/EventMetadata'

    FormEvent:
      type: object
      properties:
        event:
          type: string
          enum:
            - form
        timestamp:
          type: integer
        metadata:
          $ref: '#/components/schemas/EventMetadata'

    Event:
      oneOf:
      - $ref: '#/components/schemas/UserEvent'
      - $ref: '#/components/schemas/BotEvent'
      - $ref: '#/components/schemas/ActionEvent'
      - $ref: '#/components/schemas/RestartEvent'
      - $ref: '#/components/schemas/FormEvent'

    EventMetadata:
      type: object
      description: Metadata attached to this event. Any keys and values are accepted.

    Conversation:
      type: object
      properties:
        conversation_id:
          type: string
          description: Id of conversation
        latest_event_time:
          type: integer
          description: Timestamp of most recent event (in seconds)
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        latest_message:
          type: string
          description: Latest user message
        paused:
          type: boolean
          description: Conversation paused
        followup_action:
          type: string
          description: Name of the followup action
        slots:
          type: array
          description: Filled slots
          items:
            type: object
        latest_input_channel:
          type: string
          description: Name of the input channel last used
        latest_action_name:
          type: string
          description: Name of last bot action
        active_form:
          type: string
          description: Name of the active form

    ConversationMetadata:
      type: object
      properties:
        sender_id:
          type: string
          description: Id of this conversation
        sender_name:
          type: string
          description: >-
            Name of the conversation. In case the conversation happened between `Tester`
            user and a bot, the name will be `Tester`. Otherwise the name is equal to
            the `ConversationMetadata::sender_id` field
        latest_event_time:
          type: number
          description: Timestamp of most recent event (in seconds)
        latest_input_channel:
          type: string
          description: Name of the input channel last used
        intents:
          type: array
          items:
            type: string
          description: Set of intents in the conversation
        actions:
          type: array
          items:
            type: string
          description: Set of actions in the conversation
        minimum_action_confidence:
          type: number
          description: Minimum action confidence in the conversation
        maximum_action_confidence:
          type: number
          description: Maximum action confidence in the conversation
        minimum_intent_confidence:
          type: number
          description: Minimum intent confidence in the conversation
        maximum_intent_confidence:
          type: number
          description: Maximum intent confidence in the conversation
        in_training_data:
          type: boolean
          description: >-
            Whether any of the conversation's constituent sessions are
            entirely in training data
        review_status:
          $ref: '#/components/schemas/ConversationReviewStatus'
        policies:
          type: array
          items:
            type: string
          description: Set of policies used in the action predictions
        n_user_messages:
          type: number
          description: Number of user messages in the conversation
        has_flagged_messages:
          type: boolean
          description: Whether the conversation contains flagged messages
        corrected_messages:
          type: array
          items:
            $ref: '#/components/schemas/ConversationMessageCorrection'
        interactive:
          type: boolean
          description: Identifies if the conversation happened in interactive mode
        tags:
          type: array
          items:
            type: integer
          description: List of conversation tags ids assigned to this conversation
        created_by:
          type: string
          description: Name of the user who created the conversation

    Message:
      type: object
      properties:
        message:
          type: string

    Model:
      type: object
      properties:
        project:
          type: string
        model:
          type: string
        path:
          type: string
        hash:
          type: string
        tags:
          type: array
          items:
            type: string
        trained_at:
          type: number
        version:
          type: string
        type:
          type: string

    ResponseButtons:
      type: array
      description: Quick reply buttons
      items:
        type: object
        properties:
          title:
            type: string
            description: Button caption
          payload:
            type: string
            description: Payload to be sent if button is clicked

    BotResponse:
      type: object
      description: Bot response with filled response
      properties:
        response_name:
          type: string
        text:
          type: string
        buttons:
          $ref: '#/components/schemas/ResponseButtons'
        image:
          type: string
        attachment:
          type: object
        channel:
          type: string
        custom:
          oneOf:
            - type: array
            - type: object
        edited_since_last_training:
          type: boolean
        quick_replies:
          type: array
          items:
            type: object

    BotResponse_templates_deprecated:
      type: object
      description: Bot response with filled response
      properties:
        response_name:
          type: string
        template:
          deprecated: true
          type: string
          description: Deprecated, use `response_name` instead.
        text:
          type: string
        buttons:
          $ref: '#/components/schemas/ResponseButtons'
        image:
          type: string
        attachment:
          type: object
        channel:
          type: string
        custom:
          oneOf:
            - type: array
            - type: object
        edited_since_last_training:
          type: boolean
        quick_replies:
          type: array
          items:
            type: object

    Response:
      type: object
      description: Response for a group of bot responses.
      properties:
        name:
          type: string
          description: Name of the response

    RasaDomain:
      type: string
      description: Rasa Open Source Domain in YAML format

    RasaCoreStory:
      type: string
      description: Rasa Core story in Markdown format

    RasaCoreStoryObject:
      type: object
      properties:
        story:
          $ref: '#/components/schemas/RasaCoreStory'
        id:
          type: string
        is_rule:
          type: boolean
          example: false
        is_test:
          type: boolean
          example: false
        annotation:
          type: object
          properties:
            user:
              type: string
            time:
              type: number
            name:
              type: string

    RasaCoreRuleObject:
      type: object
      properties:
        story:
          type: string
          description: Rasa Core rule content in YAML format
        id:
          type: string
        is_rule:
          type: boolean
          example: true
        annotation:
          type: object
          properties:
            user:
              type: string
            time:
              type: number
            name:
              type: string

    TrainingExample:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        intent:
          type: string
        entities:
          type: array
          items:
            type: object
            required:
            - start
            - end
            - value
            - entity
            properties:
              start:
                oneOf:
                - type: string
                - type: integer
              end:
                oneOf:
                - type: string
                - type: integer
              entity:
                oneOf:
                - type: string
                - type: integer
              value:
                oneOf:
                - type: string
                - type: integer
              entity_synonym:
                type: integer
                nullable: true
              group:
                type: string
                nullable: true
              role:
                type: string
                nullable: true

        hash:
          type: string
        intent_mapped_to:
          type: string
          description: >-
            Name of the intent which the intent is mapped to.
            If the intent is a temporary one, it has to be mapped to an existing
            one to be part of the training. If its value is `null` it deletes
            existing mappings.

    DataWarning:
      type: object
      description: A warning tells you there are too few or too many of something. The warning will also return the `min` or `max` number that is acceptable, and the current count. For example, if you have <2 examples for one of your intents, you will receive a warning about the `dataPerIntent` with a `min` of 2 and a `count` of 1.
      properties:
        type:
          type: string
          enum: [data, blankIntent, intent, dataPerIntent]
          description: >
            Entity being warned about
            * `data` - Training data.
            * `blankIntent` - Training data with blank intent values.
            * `intent` - Intents to which your training data are classified.
            * `dataPerIntent` - Training data classified to the intent specified in `meta`.
        min:
          type: integer
          nullable: true
          description: Either `min` or `max` will always be present
        max:
          type: integer
          nullable: true
          description: Either `min` or `max` will always be present
        count:
          type: integer
        meta:
          nullable: true
          oneOf:
          - type: string
          - type: object

    Entity:
      type: object
      description: Rasa NLU entity object
      properties:
        entity:
          type: string
          description: Entity type
          example: cuisine

    MessageWithPrediction:
      type: object
      description: Message with Rasa NLU prediction
      properties:
        user_input:
          type: object
          properties:
            text:
              type: string
            intent:
              type: object
              properties:
                name:
                  type: string
                confidence:
                  type: number
            entities:
              type: array
              items:
                type: object
        project_id:
          type: string
        hash:
          type: string
        model:
          type: string
        time:
          type: number
        team:
          type: string

    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roles:
          type: array
          items:
            type: string
        data:
          $ref: '#/components/schemas/AnyValue'
        projects:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              roles:
                type: array
                items:
                  type: string
        authentication_mechanism:
          type: string

    UserSAML:
      type: object
      properties:
        saml_id:
          type: string
        roles:
          type: array
          items:
            type: string

    Role:
      type: object
      properties:
        role:
          type: string
        grants:
          type: object
          properties:
            category:
              type: array
              items:
                type: string
        description:
          description: Role description
          type: string
        is_default:
          description: >-
            Whether this role is the default role assigned to new
            enterprise users
          type: boolean
        users_count:
          description: Number of users having this role
          type: number

    ChatToken:
      type: object
      properties:
        bot_name:
          description: Name of the bot to be displayed to the receiver of a shared bot
          type: string
          maxLength: 255
        description:
          description: Description of the bot
          type: string
          maxLength: 255
        expires:
          description: expiration timestamp
          type: number
        chat_token:
          description: chat token
          type: string

    FeatureFlag:
      type: object
      description: Information about a toggable feature
      properties:
        name:
          description: Name of the feature
          type: string
        enabled:
          description: Is the feature activated
          type: boolean

    Project:
      type: object
      properties:
        project_id:
          type: string
        role:
          type: string

    BotMessage:
      type: object
      properties:
        recipient_id:
          type: string
          description: Id of the message receiver
        text:
          type: string
          description: Message
        image:
          type: string
          description: Image URL
        buttons:
          $ref: '#/components/schemas/ResponseButtons'
        attachement:
          type: array
          description: Additional information
          items:
            type: object
            properties:
              title:
                type: string
                description: Attachement caption
              payload:
                type: string
                description: Attachement payload

    PredictResult:
      type: object
      properties:
        scores:
          type: array
          description: Prediction results
          items:
            type: object
            properties:
              action:
                type: string
                description: Action name
              score:
                type: number
                description: Assigned score
        policy:
          type: string
          description: Policy which predicted the most likely action
        tracker:
          $ref: '#/components/schemas/Conversation'

    ConversationStatistics:
      type: object
      properties:
        user_messages:
          type: integer
        bot_messages:
          type: integer
        top_intents:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
        top_entities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
        top_actions:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
        top_policies:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer

    Suggestion:
      type: object
      description: Rasa NLU training example suggestion
      properties:
        id:
          type: integer
        user_input:
          type: object
          properties:
            text:
              type: string
            intent:
              type: object
              properties:
                name:
                  type: string
                confidence:
                  type: number
            entities:
              type: array
              items:
                type: object
            intent_ranking:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  confidence:
                    type: number
        hash:
          type: string
        model:
          type: string
          description: >-
            Name of the model that was active when the suggestion was created or
            updated. If no model can be associated with the log, `model` will take
            the value `unavailable`.
        time:
          type: number
        conversation_id:
          type: string
          description: >-
            ID of the conversation that the event associated with
            this suggestion belongs to. This property may be `null` if
            the suggestion has no associated event.
        event_id:
          type: integer
          description: >-
            ID of the event from which this suggestion was
            generated. This property may be `null` if the suggestion
            has no associated event.

    NlgResponse:
      type: object
      description: Generated bot response
      required:
      - text
      - response
      properties:
        text:
          type: string
        buttons:
          $ref: '#/components/schemas/ResponseButtons'
        image:
          type: string
          nullable: true
        elements:
          type: array
          items:
            type: string
        attachment:
          type: string
        response:
          type: string
        id:
          type: string

    NlgRequest:
      type: object
      description: Request object for NLG
      properties:
        tracker:
          type: object
        arguments:
          type: object
        response:
          type: string
        channel:
          type: object

    MismatchWarning:
      type: object
      description: >-
        Mismatch warning of domain items that are either found in the domain
        or in training data, but not in both
      properties:
        in_training_data:
          type: array
          items:
            type: string
            description: >-
              Item mismatches that are found in training data but
              not in the domain
        in_domain:
          type: array
          items:
            type: string
            description: >-
              Item mismatches that are found in the domain but
              not in training data

    DomainWarnings:
      type: object
      description: >-
        Mismatches between training data and domain actions, intents and entities
      properties:
        action_warnings:
          $ref: '#/components/schemas/MismatchWarning'
        intent_warnings:
          $ref: '#/components/schemas/MismatchWarning'
        entity_warnings:
          $ref: '#/components/schemas/MismatchWarning'
        slot_warnings:
          $ref: '#/components/schemas/MismatchWarning'

    IntentInformation:
      type: object
      required: ["intent"]
      properties:
        intent:
          type: string
          description: Name of the intent
        example_hashes:
          type: array
          items:
            type: string
            description: Hashes of examples with this intent
        suggestions:
          type: array
          items:
            type: string
            description: >-
              Hashes of suggestions from the conversation logs with this intent
        is_temporaray:
          type: boolean
          description: If `True` the intent is a temporary intent
        mapped_to:
          type: string
          description: >-
            In case this is a temporary intent it describes whether this intent
            is currently mapped to another one in the training data

    Action:
      type: object
      required: ["name"]
      properties:
        id:
          type: integer
          description: Id of action
        domain_id:
          type: integer
          description: Id of domain which action belongs to
        name:
          type: string
          description: Name of action
        is_form:
          type: boolean
          description: Indicates if action is a form

    RegexFeature:
      type: object
      required: ["name", "pattern"]
      properties:
        id:
          type: integer
          description: Id of regex
        name:
          type: string
          description: Name of the regex feature
        pattern:
          type: string
          description: Pattern of the regex feature

    JWT:
      type: object
      required: ["key", "alg"]
      properties:
        key:
          type: string
          description: JWT public key
        alg:
          type: string
          description: JWT algorithm used in signing the key

    LookupTable:
      type: object
      properties:
        id:
          type: integer
          description: Id of lookup table
        name:
          type: string
          description: Name of the lookup table
        number_of_elements:
          type: integer
          description: Number of elements in the lookup table

    LookupTableFile:
      type: object
      properties:
        filename:
          type: string
          description: Name of the file
        content:
          type: string
          description: Base64-encoded content of the lookup table file

    EntitySynonym:
      type: object
      description: >-
        "Represents a particular value of an entity (like `New York` for entity `city`),
        to which different text values can be mapped to (like `NY` or `Manhattan`), creating synonyms."
      properties:
        id:
          type: integer
          description: ID of entity synonym
        synonym_reference:
          type: string
          description: Text value of the entity synonym
        mapped_values:
          type: array
          items:
            $ref: '#/components/schemas/EntitySynonymValue'

    EntitySynonymValue:
      type: object
      description: Represents a text value mapped to an EntitySynonym.
      properties:
        value:
          type: string
          description: Text value mapped to this entity synonym
        id:
          type: integer
          description: ID of the value mapped to this entity synonym
        nlu_examples_count:
          type: integer
          description: Number of times this mapped value is used in NLU training examples

    AnyValue:
      anyOf:
        - type: string
        - type: number
        - type: object
        - type: array
        - type: boolean
      nullable: true

    GitCommit:
      type: object
      description: Information about a Git commit
      properties:
        message:
          type: string
          description: Commit message

    GitRepository:
      type: object
      description: Information about a connected Git repository
      properties:
        id:
          type: integer
          description: ID of the repository
        name:
          type: string
          description: Name of the repository
        repository_url:
          type: string
          description: URL to clone repository
        ssh_key:
          type: string
          description: SSH key which should be used to access a private repository
        username:
          type: string
          description: >-
            Username used to access the repository when HTTPS is used. This field is only used
            in Rasa Enterprise deployments.
        password:
          type: string
          description: >-
            Password used to access the repository when HTTPS is used. Note: this property
            is only present in request payloads, and is never part of API responses. Additionally,
            passwords are never stored by Rasa X, they are only cached temporarily in memory using
            Git's 'cache' credential store. This field  is only used in Rasa Enterprise deployments.
        git_service:
          type: string
          description: Name of the Git service which is used
          example: github
        git_service_access_token:
          type: string
          description: >-
            Access token which might be used to access the API of the Git service
            (e.g. to create pull requests)
        target_branch:
          type: string
          description: Name of the branch which should be pulled
        use_generated_ssh_keys:
          type: boolean
          description: >-
            If `True` used the private SSH key generated by Rasa X.
        is_target_branch_protected:
          type: boolean
          description: >-
            `True` if changes cannot be pushed directly to the target branch.
        first_annotator_id:
          type: string
          description: >-
            Name of the user who made the the first annotation since Integrated
            Version Control was in a clean state.
        first_annotated_at:
          type: number
          description: >-
            Time of the first annotation since Integrated Version Control was in a clean
            state as unix timestamp.

    GitStatus:
      type: object
      description: Current status of the connected Git repository
      properties:
        is_committing_to_target_branch_allowed:
          type: boolean
          description: True if committing to target branch is allowed / possible
        is_remote_ahead:
          type: boolean
          description: >-
            True if there are new commits on the target branch available on the remote
        are_there_local_changes:
          type: boolean
          description: True if there are some local changes which can be committed
        current_branch:
          type: string
          description: Branch which is currently checked out
        time_of_last_pull:
          type: number
          description: >-
            Time when the target branch was synced for the last time as unix timestamp
        authenticated:
          type: boolean
          description: >-
            When the repository has been cloned using SSH, this property is always `true`.
            When the repository has been cloned using HTTPS, this property returns `true`
            only when the password corresponding to the repository's username is currently
            cached. If this property is `false`, then API users should use the update
            repository endpoint to update the repository credentials, before using other
            endpoints.

    Commit:
      type: object
      description: Describes the created Git commit
      properties:
        remote_branch:
          type: string
          description: Describes which branch the changes were added to
        committed_to_target_branch:
          type: boolean
          description: Whether the changes were committed to the target branch

    ModelTrainingConfirmation:
      type: object
      description: Confirmation that model training was successful
      properties:
        info:
          type: string
          description: Confirmation message
        model:
          type: string
          description: Name of the newly trained model

    ModelExists:
      type: object
      description: No new model was trained as it already exists
      properties:
        info:
          type: string
          description: Info message that model already exists
        path:
          type: string
          description: Path of the existing model

    DataTagRequest:
      type: object
      description: Describes data tag
      properties:
        id:
          type: integer
          description: >-
            ID of an already existing data tag. If this property is present,
            then all other properties will be ignored, and this ID will be
            the one assigned to the conversation or message
        value:
          type: string
          description: >-
            Name of the data tag (new or already existing one). If a data tag with this name
            already exists, the existing data tag will be assigned to the conversation or message.
            If this property is present, then "color" is also required
        color:
          type: string
          description: >-
            Hex value of the data tag's color (without "#"). If this property is present,
            then "value" is also required

    DataTag:
      type: object
      description: Describes data tag
      properties:
        id:
          type: integer
          description: ID of an already existing data tag.
        value:
          type: string
          description: Name of the data tag.
        color:
          type: string
          description: Hex value of the data tag's color (without "#").
        conversations:
          type: array
          description: IDs of conversations the data tag is assigned to
          items:
            type: string
        messages:
          type: array
          description: IDs of messages the data tag is assigmed to
          items:
            type: string

    ConversationReviewStatus:
      type: object
      description: Describes conversation review status
      properties:
        review_status:
          enum: ["unread", "reviewed", "saved_for_later"]
          description: Review status

    ConversationCreateInstruction:
      type: object
      description: Describes how to create a conversation.
      properties:
        sender_id:
          type: string
          description: >-
            Optional ID of the new conversation.
        conversation_id_to_copy_from:
          type: string
          description: >-
            Optional ID of the conversation from which events should be copied into the
            new conversation.
        until:
          type: number
          description: >-
            Until which point in time the events should be copied from a given
            existing conversation. `Until` means `less than or equal to`.

    ConversationMessageCorrection:
      type: object
      description: Post hoc corrections of intents in a conversation
      properties:
        message_timestamp:
          type: number
          description: Time of the message correction as unix timestamp
        intent:
          type: string
          description: Final (corrected) value of the intent

    CoreEvaluationStoriesResult:
      type: object
      properties:
        actions:
          type: array
          items:
            type: object
            properties:
              action:
                type: string
                description: Name of the actual action
                example: utter_ask_howcanhelp
              predicted:
                type: string
                description: Name of the predicted action
                example: utter_ask_howcanhelp
              policy:
                type: string
                description: Machine-learning policy used in the prediction
                example: RulePolicy
              confidence:
                type: string
                description: Confidence score of the prediction
                example: 1.0
          description: >-
            Accuracy of the classification,
            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
        is_end_to_end_evaluation:
          type: boolean
          description: True if evaluation is end-to-end, false otherwise
          example: true
        precision:
          type: number
          description: >-
            Precision of the classification, see
            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
          example: 1.0
        f1:
          type: number
          description: >-
            F1 score of the classification,
            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
          example: 0.93
        accuracy:
          type: number
          description: >-
            Accuracy of the classification,
            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
          example: 0.9
        in_training_data_fraction:
          type: number
          description: >-
            Fraction of stories that are present in the training data of the
            model loaded at evaluation time.
          example: 0.86
        report:
          type: string
          description: >-
            Sklearn classifcation report, see
            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html

    NluEvaluation:
      type: object
      description: Rasa NLU evaluation
      properties:
        report:
          anyOf:
          - type: string
          - type: object
            properties:
              accuracy:
                type: number
              macro avg:
                type: object
              weighted avg:
                type: object
        accuracy:
          type: number
          example: 0.19
        f1_score:
          type: number
          example: 0.06
        precision:
          type: number
          example: 0.03
        predictions:
          type: array
          items:
            type: object
            properties:
              intent:
                type: string
                example: greet
              predicted:
                type: string
                example: greet
              text:
                type: string
                example: "hey"
              confidence:
                type: number
                example: 0.99

    NLUInsightReport:
      type: object
      description: Rasa NLU insight
      properties:
        id:
          type: number
        started_at:
          type: number
        finished_at:
          type: number
          nullable: true
        status:
          description: Gives information about the status of the insight calculation
          type: string
          enum: [in_progress, success, failure]

    NLUInsightReportFull:
      type: object
      description: Rasa NLU insight
      properties:
        id:
          type: number
        started_at:
          type: number
        finished_at:
          type: number
          nullable: true
        intent_evaluation_results:
          type: array
          items:
            $ref: '#/components/schemas/IntentEvaluationResult'

    IntentEvaluationResult:
      type: object
      description: Rasa NLU insight evaluation intent
      properties:
        intent_name:
          type: string
        f1_score:
          type: number
        precision:
          type: number
        recall:
          type: number
        number_of_training_examples:
          type: number
        intent_insights:
          type: array
          items:
            $ref: '#/components/schemas/IntentInsight'

    IntentInsight:
      type: object
      description: Rasa NLU intent insight
      properties:
        source:
          type: string
        details:
          type: object

    NLUEvaluationResult:
      type: object
      properties:
        intent_evaluation:
          description: Rasa NLU intent evaluation
          $ref: '#/components/schemas/EvaluationItem'
        response_selection_evaluation:
          description: Evaluation for the retrieval intents
          $ref: '#/components/schemas/EvaluationItem'
        entity_evaluation:
          description: Rasa NLU entity evaluation.
          type: object
          additionalProperties:
            type: object
            description: Evaluation for a specific extractor
            $ref: '#/components/schemas/EvaluationItem'

    EvaluationItem:
      type: object
      description: Evaluation Result
      properties:
        report:
          $ref: '#/components/schemas/EvaluationReport'
        accuracy:
          type: number
          example: 0.19047619047619047
        f1_score:
          type: number
          example: 0.06095238095238095
        precision:
          type: number
          example: 0.036281179138321996
        predictions:
          type: array
          description: The predictions for each item in the test set
          items:
            type: object
            properties:
              intent:
                type: string
                example: greet
              predicted:
                type: string
                example: greet
              text:
                type: string
                example: "hey"
              confidence:
                type: number
                example: 0.9973567
        errors:
          description: The errors which were made during the testing.
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/IntentTestError'
              - $ref: '#/components/schemas/EntityTestError'
              - $ref: '#/components/schemas/ResponseSelectorTestError'

    IntentTestError:
      description: Intent prediction errors which was made during testing
      type: object
      properties:
        text:
          type: string
          description: Test message
          example: are you alright?
        intent_response_key_target:
          description: Expected intent
          type: string
        intent_response_key_prediction:
          description: Predicted intent
          $ref: '#/components/schemas/IntentExample'

    EntityTestError:
      description: Entity prediction errors which was made during testing
      type: object
      properties:
        text:
          type: string
          description: Test message
          example: what is the weather in zurich?
        entities:
          description: Expected entities
          type: array
          items:
            $ref: '#/components/schemas/EntityExample'
        predicted_entities:
          description: Predicted entities
          type: array
          items:
            $ref: '#/components/schemas/EntityExample'

    ResponseSelectorTestError:
      description: Error during response prediction which was made during testing
      type: object
      properties:
        text:
          type: string
          description: Test message
          example: are you alright?
        intent_response_key_target:
          description: Expected retrieval intent
          type: string
        intent_response_key_prediction:
          description: Predicted retrieval intent
          $ref: '#/components/schemas/IntentExample'

    EvaluationReport:
      type: object
      description: >-
        Sklearn classification report, see
        http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html
      example:
        greet:
          precision: 0.123
          recall: 0.456
          f1-score: 0.12
          support: 100
          confused_with:
            chitchat: 3
            nlu_fallback: 5
        micro avg:
          precision: 0.123
          recall: 0.456
          f1-score: 0.12
          support: 100
        macro avg:
          precision: 0.123
          recall: 0.456
          f1-score: 0.12
          support: 100
        weightedq avg:
          precision: 0.123
          recall: 0.456
          f1-score: 0.12
          support: 100

    EntityExample:
      type: object
      description: Entities within a message
      properties:
        start:
          type: integer
          description: Char offset of the start
        end:
          type: integer
          description: Char offset of the end
        value:
          type: string
          description: Found value for entity
        entity:
          type: string
          description: Type of the entity
        confidence:
          type: number
      required: [ "start", "end", "value", "entity" ]

    IntentExample:
      type: object
      description: Intent of the text
      properties:
        confidence:
          type: number
          description: Confidence of the intent
          example: 0.6323
        name:
          type: string
          description: Intent name
          example: greet
      required: [ "confidence", "name" ]


    IntentInsightConfig:
      type: object
      description: Intent insights configuration.
      properties:
        schedule:
          type: string
          description: >-
            Optional Crontab schedule for calculation insights. If null the
            scheduled background runs are disabled.
          example: "5 1 * * *"
        cross_validation_folds:
          type: number
          description: The number of folds to use when running the cross validation.
        calculator_configuration:
          type: object
          description: The config for each insight linter. Map of linter names to list of parameters.
          example: |
            {
              "MinimumExampleInsightCalculator": {
                "required_number_of_examples_per_intent": 100
              },
              "rasax.community.services.insights.insight_calculator.ConfusionInsightCalculator": {
                "top_x_percent_threshold": 1
              },
            }
